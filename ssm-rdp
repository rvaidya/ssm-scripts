#!/bin/bash

if [ $# -eq 0 ]
then
  echo "Syntax:"
  echo "  ssm-rdp <options> <args>"
  echo "    Options:"
  echo "      -n (optional): AWS instance tag name"
  echo "      -i (optional): AWS instance ID"
  echo "      Either -n or -i must be specified"
  echo "    Arguments:"
  echo "      local port (optional, default 54000)"
  echo "      remote port (optional, default 3389)"
  echo "      host (optional, default localhost)"
  exit 0
fi

INSTANCE_NAME=""
INSTANCE_ID=""

while getopts "n:i:" opt; do
  case ${opt} in
    n) INSTANCE_NAME=${OPTARG};;
    i) INSTANCE_ID=${OPTARG};;
  esac
done

if [ -z $INSTANCE_NAME ] && [ -z $INSTANCE_ID ]
then
  echo "Must pass instance name with -n or instance id with -i"
  exit 2
fi

shift $((OPTIND -1))

if [ -z $INSTANCE_ID ]
  then
  # find the instance ID based on Tag Name
  INSTANCE_ID=$(aws-resolve-host $INSTANCE_NAME)

  exit_code=$?

  if [ $exit_code -eq 1 ]
  then
    echo "Unable to resolve AWS host by tag name: $INSTANCE_NAME"
    exit $exit_code
  fi
fi

local_port=${1:-54000}
remote_port=${2:-3389}
ssm_host=${3:-localhost}

# generate a new user on the target instance
ssm_username="ssm_$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)"
ssm_group=Administrators

# password must have at least 1 number
ssm_password="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)$(cat /dev/urandom | tr -dc '0-9' | fold -w 2 | head -n 1)"

# provision the user
ssm-ps -i $INSTANCE_ID "(\$Password = ConvertTo-SecureString '$ssm_password' -AsPlainText -Force) -and (New-LocalUser '$ssm_username' -Password \$Password -FullName 'Autogenerated SSMUser' -Description 'Autogenerated ssm user')" > /dev/null

exit_code=$?

if [ $exit_code -ne 0 ]
then
  echo "Error encountered, unable to continue."
  exit $exit_code
fi

ssm-ps -i $INSTANCE_ID "Add-LocalGroupMember -Group '$ssm_group' -Member '$ssm_username'" > /dev/null

# echo temporary credentials
echo "Use these credentials to log in:"
echo "Address: $ssm_host:$local_port"
echo "Username: $ssm_username"
echo "Password: $ssm_password"

# run mstsc if binaries exist, in background
ssm-mstsc "$ssm_username" "$ssm_password" $local_port $remote_port "$ssm_host" &

# create the port forwarding tunnel
ssm-tunnel -i $INSTANCE_ID $remote_port $local_port

# remove the user once we're done
ssm-ps -i $INSTANCE_ID "Remove-LocalUser -Name '$ssm_username'" > /dev/null
echo "Temporary account removed."
